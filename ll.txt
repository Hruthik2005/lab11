package com.company;

//LinkedList in Java: Demo & Methods
//        The LinkedList class in Java provides us with the doubly linked list data structure.
//        Each element of the linked list is known as a node.
//        Each node points to the address of the next node & its previous node.
//        Linkedlist image
//
//        Linked lists are preferred over the Array list because the insertion & deletion in the linked lists can be done in a constant time. But, in arrays, if we want to add or delete an element in between then, we need to shift all the other elements.
//        In a linked list, it is impossible to directly access an element because we need to traverse the whole linked list to get the desired element.
//        ArrayList Vs. LinkedList :
//        Although ArrayList & LinkedList both implement the List interface and have the same methods, it is important to understand when to use which one.
//
//        The insertion & deletion can be done in constant time in Linked List, so it is best to use the linked list when you need to add or remove elements frequently.
//        Use ArrayList when you want to access the random elements frequently, as it canâ€™t be done in a linked list in constant time.



import java.util.LinkedList;

public class  CWH_92_LinkedList {
    public static void main(String[] args) {
        LinkedList<Integer> l1 = new LinkedList<>();  /*Creates an ArrayList object of
                                           integer type */
        LinkedList<Integer>  l2 = new LinkedList<>();
        l2.add(15);
        l2.add(20);
        l2.add(25);


        l1.add(5);
        l1.add(6);
        l1.add(7);
        l1.add(8);                        //add the element in last
        l1.add(9);
        l1.add(6);

        l1.addAll(0,l2);           //this will add all the elements of l2 from index 0
        System.out.println("LinkedList");
        l1.add(4,10);       //Adds at specified location
        System.out.println("Appended element on index 4 with 20");
        l1.add(4,20);
        // sets the specific element at specific location

        l1.addLast(999);             //add element to the last position
        l1.addFirst(111);            //add element to the first place

        for(int i=0 ; i<l1.size() ; i++ ){

            System.out.print(l1.get(i));  //returns the element at specified location
            System.out.print(", ");

        }
        System.out.println();


        System.out.println("index of 6: "+l1.indexOf(6));  //returns index of specific elements first occurrence
        System.out.println("index of 6 last occurrence: "+ l1.lastIndexOf(6));
        System.out.println("Size of Linked List: "+ l1.size());
        System.out.println(l1.contains(8));

        //Because linked list also implements the deque interface so it will also have properties of lifo last in first out
        //so in addition to all the methods that we can perform in ArrayList  we can addLast() and addFirst()  methods
        Object clear = new Object();    //usage of clear();
        l1.clear();
        for(int i=0 ; i<l1.size() ; i++ ){     //this will not print anything as now there are no elements in the array

            System.out.print(l1.get(i));  //returns the element at specified location
            System.out.print(", ");

        }
        System.out.println(l1.contains(8));     //this will return false as if now there are no elements in the LinkedList
        System.out.println("EOP");



    }
}